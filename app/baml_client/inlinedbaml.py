###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n  \nclient<llm> Sonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n    temperature 0\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastAnthropic {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastOpenAI {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/round-robin\n    strategy [FastAnthropic, FastOpenAI]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/fallback\n    strategy [GPT4o, FastOpenAI]\n  }\n}",
    "extract-tables.baml": "class TableMetadata {\n  // reason string @description(\"Brief explanation of why this table and these columns are relevant\")\n\n  tableName string @description(\"Name of the selected table\")\n  columns string[] @description(\"Names of relevant columns from this table\")\n}\n\ntemplate_string ChainOfThought #\"\n  Before you answer, add your thinking in <think> </think> tags, to help you figure out why each table and column is relevant to the question.\n\"#\n\nfunction SelectRelevantTables(userQuestion: string, schemaDescription: string) -> TableMetadata[] {\n  client GPT4o\n  prompt #\"\n    Given a JSON description of multiple database tables and their columns, select the most relevant tables and columns that would be needed to construct a SQL query.\n\n    Only select tables and columns that are directly relevant. Explain briefly why each selected table is relevant.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ schemaDescription }}\n  \"#\n}\n\n// Note: we may want to make the schema description include the type of each column (float, int, etc, just for additional context).\ntest BasicSchemaTest {\n  functions [SelectRelevantTables]\n  args {\n    userQuestion #\"\n      What are the top 10 most popular products in the database?\n    \"#\n    schemaDescription #\"\n      {\n        \"users\": {\n          \"columns\": {\n            \"id\": \"unique user identifier\",\n            \"name\": \"user's full name\",\n            \"email\": \"user's email address\",\n            \"created_at\": \"timestamp of user creation\"\n          }\n        },\n        \"orders\": {\n          \"columns\": {\n            \"id\": \"unique order identifier\",\n            \"user_id\": \"reference to users table\",\n            \"total_amount\": \"total order amount\",\n            \"status\": \"order status (pending/completed)\"\n          }\n        }\n      }\n    \"#\n  }\n}\n\ntest ComplexSchemaTest {\n  functions [SelectRelevantTables]\n  args {\n    userQuestion #\"\n      What is the current stock level of the top-selling products in each category?\n    \"#\n    schemaDescription #\"\n      {\n        \"products\": {\n          \"columns\": {\n            \"id\": \"unique product identifier\",\n            \"name\": \"product name\",\n            \"price\": \"product price\",\n            \"category_id\": \"reference to categories table\"\n          }\n        },\n        \"categories\": {\n          \"columns\": {\n            \"id\": \"unique category identifier\",\n            \"name\": \"category name\"\n          }\n        },\n        \"inventory\": {\n          \"columns\": {\n            \"product_id\": \"reference to products table\",\n            \"quantity\": \"available quantity\",\n            \"warehouse_id\": \"storage location\"\n          }\n        }\n      }\n    \"#\n  }\n}",
    "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode sync\n}   ",
}

def get_baml_files():
    return file_map